(()=>{"use strict";function t(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function e(e){if(!(n=e,n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)||"number"==typeof e))return!1;var n;const a=t(e);return!isNaN(Number(a))}const n={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function a(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const o={date:a({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:a({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:a({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},s={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function r(t){return(e,n)=>{let a;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,o=n?.width?String(n.width):e;a=t.formattingValues[o]||t.formattingValues[e]}else{const e=t.defaultWidth,o=n?.width?String(n.width):t.defaultWidth;a=t.values[o]||t.values[e]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function i(t){return(e,n={})=>{const a=n.width,o=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],s=e.match(o);if(!s)return null;const r=s[0],i=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(i)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(r))return e}(i):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(r))return e}(i);let d;return d=t.valueCallback?t.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:e.slice(r.length)}}}var c;const d={code:"en-US",formatDistance:(t,e,a)=>{let o;const s=n[t];return o="string"==typeof s?s:1===e?s.one:s.other.replace("{{count}}",e.toString()),a?.addSuffix?a.comparison&&a.comparison>0?"in "+o:o+" ago":o},formatLong:o,formatRelative:(t,e,n,a)=>s[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:r({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:r({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:r({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:r({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:r({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(c={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(c.matchPattern);if(!n)return null;const a=n[0],o=t.match(c.parsePattern);if(!o)return null;let s=c.valueCallback?c.valueCallback(o[0]):o[0];return s=e.valueCallback?e.valueCallback(s):s,{value:s,rest:t.slice(a.length)}}),era:i({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:i({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:i({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:i({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:i({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let u={};function l(){return u}Math.pow(10,8);const m=6048e5,h=864e5;function p(e){const n=t(e);return n.setHours(0,0,0,0),n}function g(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function f(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function k(e){const n=t(e);return function(t,e){const n=p(t),a=p(e),o=n.getTime()-g(n),s=a.getTime()-g(a);return Math.round((o-s)/h)}(n,function(e){const n=t(e),a=f(e,0);return a.setFullYear(n.getFullYear(),0,1),a.setHours(0,0,0,0),a}(n))+1}function w(e,n){const a=l(),o=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,s=t(e),r=s.getDay(),i=(r<o?7:0)+r-o;return s.setDate(s.getDate()-i),s.setHours(0,0,0,0),s}function y(t){return w(t,{weekStartsOn:1})}function b(e){const n=t(e),a=n.getFullYear(),o=f(e,0);o.setFullYear(a+1,0,4),o.setHours(0,0,0,0);const s=y(o),r=f(e,0);r.setFullYear(a,0,4),r.setHours(0,0,0,0);const i=y(r);return n.getTime()>=s.getTime()?a+1:n.getTime()>=i.getTime()?a:a-1}function T(e){const n=t(e),a=y(n).getTime()-function(t){const e=b(t),n=f(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),y(n)}(n).getTime();return Math.round(a/m)+1}function v(e,n){const a=t(e),o=a.getFullYear(),s=l(),r=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??s.firstWeekContainsDate??s.locale?.options?.firstWeekContainsDate??1,i=f(e,0);i.setFullYear(o+1,0,r),i.setHours(0,0,0,0);const c=w(i,n),d=f(e,0);d.setFullYear(o,0,r),d.setHours(0,0,0,0);const u=w(d,n);return a.getTime()>=c.getTime()?o+1:a.getTime()>=u.getTime()?o:o-1}function P(e,n){const a=t(e),o=w(a,n).getTime()-function(t,e){const n=l(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,o=v(t,e),s=f(t,0);return s.setFullYear(o,0,a),s.setHours(0,0,0,0),w(s,e)}(a,n).getTime();return Math.round(o/m)+1}function j(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const E={y(t,e){const n=t.getFullYear(),a=n>0?n:1-n;return j("yy"===e?a%100:a,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):j(n+1,2)},d:(t,e)=>j(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>j(t.getHours()%12||12,e.length),H:(t,e)=>j(t.getHours(),e.length),m:(t,e)=>j(t.getMinutes(),e.length),s:(t,e)=>j(t.getSeconds(),e.length),S(t,e){const n=e.length,a=t.getMilliseconds();return j(Math.floor(a*Math.pow(10,n-3)),e.length)}},D={G:function(t,e,n){const a=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),a=e>0?e:1-e;return n.ordinalNumber(a,{unit:"year"})}return E.y(t,e)},Y:function(t,e,n,a){const o=v(t,a),s=o>0?o:1-o;return"YY"===e?j(s%100,2):"Yo"===e?n.ordinalNumber(s,{unit:"year"}):j(s,e.length)},R:function(t,e){return j(b(t),e.length)},u:function(t,e){return j(t.getFullYear(),e.length)},Q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return j(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return j(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){const a=t.getMonth();switch(e){case"M":case"MM":return E.M(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){const a=t.getMonth();switch(e){case"L":return String(a+1);case"LL":return j(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){const o=P(t,a);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):j(o,e.length)},I:function(t,e,n){const a=T(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):j(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):E.d(t,e)},D:function(t,e,n){const a=k(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):j(a,e.length)},E:function(t,e,n){const a=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){const o=t.getDay(),s=(o-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(s);case"ee":return j(s,2);case"eo":return n.ordinalNumber(s,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){const o=t.getDay(),s=(o-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(s);case"cc":return j(s,e.length);case"co":return n.ordinalNumber(s,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){const a=t.getDay(),o=0===a?7:a;switch(e){case"i":return String(o);case"ii":return j(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){const a=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){const a=t.getHours();let o;switch(o=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){const a=t.getHours();let o;switch(o=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return E.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):E.H(t,e)},K:function(t,e,n){const a=t.getHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):j(a,e.length)},k:function(t,e,n){let a=t.getHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):j(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):E.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):E.s(t,e)},S:function(t,e){return E.S(t,e)},X:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return L(o);case"XXXX":case"XX":return x(o);default:return x(o,":")}},x:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return L(o);case"xxxx":case"xx":return x(o);default:return x(o,":")}},O:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+M(o,":");default:return"GMT"+x(o,":")}},z:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+M(o,":");default:return"GMT"+x(o,":")}},t:function(t,e,n,a){const o=a._originalDate||t;return j(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,a){return j((a._originalDate||t).getTime(),e.length)}};function M(t,e=""){const n=t>0?"-":"+",a=Math.abs(t),o=Math.floor(a/60),s=a%60;return 0===s?n+String(o):n+String(o)+e+j(s,2)}function L(t,e){return t%60==0?(t>0?"-":"+")+j(Math.abs(t)/60,2):x(t,e)}function x(t,e=""){const n=t>0?"-":"+",a=Math.abs(t);return n+j(Math.floor(a/60),2)+e+j(a%60,2)}const S=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},I=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},B={p:I,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],a=n[1],o=n[2];if(!o)return S(t,e);let s;switch(a){case"P":s=e.dateTime({width:"short"});break;case"PP":s=e.dateTime({width:"medium"});break;case"PPP":s=e.dateTime({width:"long"});break;default:s=e.dateTime({width:"full"})}return s.replace("{{date}}",S(a,e)).replace("{{time}}",I(o,e))}},N=["D","DD"],W=["YY","YYYY"];function A(t,e,n){if("YYYY"===t)throw new RangeError(`Use \`yyyy\` instead of \`YYYY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("YY"===t)throw new RangeError(`Use \`yy\` instead of \`YY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("D"===t)throw new RangeError(`Use \`d\` instead of \`D\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("DD"===t)throw new RangeError(`Use \`dd\` instead of \`DD\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`)}const C=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Y=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,O=/^'([^]*?)'?$/,q=/''/g,H=/[a-zA-Z]/;function F(t){return e=t,n=Date.now(),+p(e)==+p(n);var e,n}function $(t,e){return function(t,e,n){return+w(t,n)==+w(e,n)}(t,Date.now(),e)}function z(e,n){return function(e,n){const a=t(e);return isNaN(n)?f(e,NaN):n?(a.setDate(a.getDate()+n),a):a}(e,-n)}class Q{constructor(t){this.name=t,this.tasks=[]}setName(t){this.name=t}getName(){return this.name}setTasks(t){this.tasks=t}getTasks(){return this.tasks}getTask(t){return this.tasks.find((e=>e.getName()===t))}contains(t){return this.tasks.some((e=>e.getName()===t))}addTask(t){this.contains(t)||this.tasks.push(t)}deleteTask(t){this.tasks=this.tasks.filter((e=>e.getName()!==t))}getTasksToday(){return this.tasks.filter((e=>F(t(new Date(e.getDateFormatted())))))}getTasksThisWeek(){return this.tasks.filter((e=>$(z(t(new Date(e.getDateFormatted())),1))))}}class G{constructor(t,e="No date"){this.name=t,this.dueDate=e}setName(t){this.name=t}getName(){return this.name}setDate(t){this.dueDate=t}getDate(){return this.dueDate}getDateFormatted(){const t=this.dueDate.split("/")[0];return`${this.dueDate.split("/")[1]}/${t}/${this.dueDate.split("/")[2]}`}}class X{constructor(){this.projects=[],this.projects.push(new Q("Inbox")),this.projects.push(new Q("Today")),this.projects.push(new Q("This week"))}setProjects(t){this.projects=t}getProjects(){return this.projects}getProject(t){return this.projects.find((e=>e.getName()===t))}contains(t){return this.projects.some((e=>e.getName()===t))}addProject(t){this.projects.find((e=>e.name===t.name))||this.projects.push(t)}deleteProject(t){const e=this.projects.find((e=>e.getName()===t));this.projects.splice(this.projects.indexOf(e),1)}updateTodayProject(){this.getProject("Today").tasks=[],this.projects.forEach((t=>{"Today"!==t.getName()&&"This week"!==t.getName()&&t.getTasksToday().forEach((e=>{const n=`${e.getName()} (${t.getName()})`;this.getProject("Today").addTask(new G(n,e.getDate()))}))}))}updateWeekProject(){this.getProject("This week").tasks=[],this.projects.forEach((t=>{"Today"!==t.getName()&&"This week"!==t.getName()&&t.getTasksThisWeek().forEach((e=>{const n=`${e.getName()} (${t.getName()})`;this.getProject("This week").addTask(new G(n,e.getDate()))}))})),this.getProject("This week").setTasks(this.getProject("This week").getTasks().sort(((e,n)=>function(e,n){const a=t(e),o=t(n),s=a.getTime()-o.getTime();return s<0?-1:s>0?1:s}(t(new Date(e.getDateFormatted())),t(new Date(n.getDateFormatted()))))))}}class R{static saveTodoList(t){localStorage.setItem("todoList",JSON.stringify(t))}static getTodoList(){const t=Object.assign(new X,JSON.parse(localStorage.getItem("todoList")));return t.setProjects(t.getProjects().map((t=>Object.assign(new Q,t)))),t.getProjects().forEach((t=>t.setTasks(t.getTasks().map((t=>Object.assign(new G,t)))))),t}static addProject(t){const e=R.getTodoList();e.addProject(t),R.saveTodoList(e)}static deleteProject(t){const e=R.getTodoList();e.deleteProject(t),R.saveTodoList(e)}static addTask(t,e){const n=R.getTodoList();n.getProject(t).addTask(e),R.saveTodoList(n)}static deleteTask(t,e){const n=R.getTodoList();n.getProject(t).deleteTask(e),R.saveTodoList(n)}static renameTask(t,e,n){const a=R.getTodoList();a.getProject(t).getTask(e).setName(n),R.saveTodoList(a)}static setTaskDate(t,e,n){const a=R.getTodoList();a.getProject(t).getTask(e).setDate(n),R.saveTodoList(a)}static updateTodayProject(){const t=R.getTodoList();t.updateTodayProject(),R.saveTodoList(t)}static updateWeekProject(){const t=R.getTodoList();t.updateWeekProject(),R.saveTodoList(t)}}class J{static loadHomepage(){J.loadProjects(),console.log("pepe"),J.initProjectButtons(),J.openProject("Inbox",document.getElementById("button-inbox-projects")),document.addEventListener("keydown",J.handleKeyboardInput)}static loadProjects(){R.getTodoList().getProjects().forEach((t=>{"Inbox"!==t.name&&"Today"!==t.name&&"This week"!==t.name&&J.createProject(t.name)})),J.initAddProjectButtons()}static loadTasks(t){R.getTodoList().getProject(t).getTasks().forEach((t=>J.createTask(t.name,t.dueDate))),"Today"!==t&&"This week"!==t&&J.initAddTaskButtons()}static loadProjectContent(t){const e=document.getElementById("project-preview");e.innerHTML=`\n        <h1 id="project-name">${t}</h1>\n        <div class="tasks-list" id="tasks-list"></div>`,"Today"!==t&&"This week"!==t&&(e.innerHTML+='\n        <button class="button-add-task" id="button-add-task">\n          <i class="fas fa-plus"></i>\n          Add Task\n        </button>\n        <div class="add-task-popup" id="add-task-popup">\n          <input\n            class="input-add-task-popup"\n            id="input-add-task-popup"\n            type="text"\n          />\n          <div class="add-task-popup-buttons">\n            <button class="button-add-task-popup" id="button-add-task-popup">\n              Add\n            </button>\n            <button\n              class="button-cancel-task-popup"\n              id="button-cancel-task-popup"\n            >\n              Cancel\n            </button>\n          </div>\n        </div>'),J.loadTasks(t)}static createProject(t){document.getElementById("projects-list").innerHTML+=` \n      <button class="button-project" data-project-button>\n        <div class="left-project-panel">\n          <i class="fas fa-tasks"></i>\n          <span>${t}</span>\n        </div>\n        <div class="right-project-panel">\n          <i class="fas fa-times"></i>\n        </div>\n      </button>`,J.initProjectButtons()}static createTask(t,e){document.getElementById("tasks-list").innerHTML+=`\n      <button class="button-task" data-task-button>\n        <div class="left-task-panel">\n          <i class="far fa-circle"></i>\n          <p class="task-content">${t}</p>\n          <input type="text" class="input-task-name" data-input-task-name>\n        </div>\n        <div class="right-task-panel">\n          <p class="due-date" id="due-date">${e}</p>\n          <input type="date" class="input-due-date" data-input-due-date>\n          <i class="fas fa-times"></i>\n        </div>\n      </button>`,J.initTaskButtons()}static clear(){J.clearProjectPreview(),J.clearProjects(),J.clearTasks()}static clearProjectPreview(){document.getElementById("project-preview").textContent=""}static clearProjects(){document.getElementById("projects-list").textContent=""}static clearTasks(){document.getElementById("tasks-list").textContent=""}static closeAllPopups(){J.closeAddProjectPopup(),document.getElementById("button-add-task")&&J.closeAddTaskPopup(),document.getElementById("tasks-list")&&""!==document.getElementById("tasks-list").innerHTML&&J.closeAllInputs()}static closeAllInputs(){document.querySelectorAll("[data-task-button]").forEach((t=>{J.closeRenameInput(t),J.closeSetDateInput(t)}))}static handleKeyboardInput(t){"Escape"===t.key&&J.closeAllPopups()}static initAddProjectButtons(){const t=document.getElementById("button-add-project"),e=document.getElementById("button-add-project-popup"),n=document.getElementById("button-cancel-project-popup"),a=document.getElementById("input-add-project-popup");t.addEventListener("click",J.openAddProjectPopup),e.addEventListener("click",J.addProject),n.addEventListener("click",J.closeAddProjectPopup),a.addEventListener("keypress",J.handleAddProjectPopupInput)}static openAddProjectPopup(){const t=document.getElementById("add-project-popup"),e=document.getElementById("button-add-project");J.closeAllPopups(),t.classList.add("active"),e.classList.add("active")}static closeAddProjectPopup(){const t=document.getElementById("add-project-popup"),e=document.getElementById("button-add-project"),n=document.getElementById("input-add-project-popup");t.classList.remove("active"),e.classList.remove("active"),n.value=""}static addProject(){const t=document.getElementById("input-add-project-popup"),e=t.value;if(""!==e){if(R.getTodoList().contains(e))return t.value="",void alert("Project names must be different");R.addProject(new Q(e)),J.createProject(e),J.closeAddProjectPopup()}else alert("Project name can't be empty")}static handleAddProjectPopupInput(t){"Enter"===t.key&&J.addProject()}static initProjectButtons(){const t=document.getElementById("button-inbox-projects"),e=document.getElementById("button-today-projects"),n=document.getElementById("button-week-projects"),a=document.querySelectorAll("[data-project-button]"),o=document.getElementById("button-open-nav");t.addEventListener("click",J.openInboxTasks),e.addEventListener("click",J.openTodayTasks),n.addEventListener("click",J.openWeekTasks),a.forEach((t=>t.addEventListener("click",J.handleProjectButton))),o.addEventListener("click",J.openNav)}static openInboxTasks(){J.openProject("Inbox",this)}static openTodayTasks(){R.updateTodayProject(),J.openProject("Today",this)}static openWeekTasks(){R.updateWeekProject(),J.openProject("This week",this)}static handleProjectButton(t){const e=this.children[0].children[1].textContent;t.target.classList.contains("fa-times")?J.deleteProject(e,this):J.openProject(e,this)}static openProject(t,e){[...document.querySelectorAll(".button-default-project"),...document.querySelectorAll(".button-project")].forEach((t=>t.classList.remove("active"))),e.classList.add("active"),J.closeAddProjectPopup(),J.loadProjectContent(t)}static deleteProject(t,e){e.classList.contains("active")&&J.clearProjectPreview(),R.deleteProject(t),J.clearProjects(),J.loadProjects()}static openNav(){const t=document.getElementById("nav");J.closeAllPopups(),t.classList.toggle("active")}static initAddTaskButtons(){const t=document.getElementById("button-add-task"),e=document.getElementById("button-add-task-popup"),n=document.getElementById("button-cancel-task-popup"),a=document.getElementById("input-add-task-popup");t.addEventListener("click",J.openAddTaskPopup),e.addEventListener("click",J.addTask),n.addEventListener("click",J.closeAddTaskPopup),a.addEventListener("keypress",J.handleAddTaskPopupInput)}static openAddTaskPopup(){const t=document.getElementById("add-task-popup"),e=document.getElementById("button-add-task");J.closeAllPopups(),t.classList.add("active"),e.classList.add("active")}static closeAddTaskPopup(){const t=document.getElementById("add-task-popup"),e=document.getElementById("button-add-task"),n=document.getElementById("input-add-task-popup");t.classList.remove("active"),e.classList.remove("active"),n.value=""}static addTask(){const t=document.getElementById("project-name").textContent,e=document.getElementById("input-add-task-popup"),n=e.value;if(""!==n){if(R.getTodoList().getProject(t).contains(n))return alert("Task names must be different"),void(e.value="");R.addTask(t,new G(n)),J.createTask(n,"No date"),J.closeAddTaskPopup()}else alert("Task name can't be empty")}static handleAddTaskPopupInput(t){"Enter"===t.key&&J.addTask()}static initTaskButtons(){const t=document.querySelectorAll("[data-task-button]"),e=document.querySelectorAll("[data-input-task-name"),n=document.querySelectorAll("[data-input-due-date");t.forEach((t=>t.addEventListener("click",J.handleTaskButton))),e.forEach((t=>t.addEventListener("keypress",J.renameTask))),n.forEach((t=>t.addEventListener("change",J.setTaskDate)))}static handleTaskButton(t){t.target.classList.contains("fa-circle")?J.setTaskCompleted(this):t.target.classList.contains("fa-times")?J.deleteTask(this):t.target.classList.contains("task-content")?J.openRenameInput(this):t.target.classList.contains("due-date")&&J.openSetDateInput(this)}static setTaskCompleted(t){const e=document.getElementById("project-name").textContent,n=t.children[0].children[1].textContent;if("Today"===e||"This week"===e){const t=n.split("(")[1].split(")")[0];R.deleteTask(t,n.split(" ")[0]),"Today"===e?R.updateTodayProject():R.updateWeekProject()}else R.deleteTask(e,n);J.clearTasks(),J.loadTasks(e)}static deleteTask(t){const e=document.getElementById("project-name").textContent,n=t.children[0].children[1].textContent;if("Today"===e||"This week"===e){const t=n.split("(")[1].split(")")[0];R.deleteTask(t,n)}R.deleteTask(e,n),J.clearTasks(),J.loadTasks(e)}static openRenameInput(t){const e=t.children[0].children[1];let n=e.textContent;const a=t.children[0].children[2],o=t.parentNode.parentNode.children[0].textContent;"Today"!==o&&"This week"!==o||([n]=n.split(" (")),J.closeAllPopups(),e.classList.add("active"),a.classList.add("active"),a.value=n}static closeRenameInput(t){const e=t.children[0].children[1],n=t.children[0].children[2];e.classList.remove("active"),n.classList.remove("active"),n.value=""}static renameTask(t){if("Enter"!==t.key)return;const e=document.getElementById("project-name").textContent,n=this.previousElementSibling.textContent,a=this.value;if(""!==a){if(R.getTodoList().getProject(e).contains(a))return this.value="",void alert("Task names must be different");if("Today"===e||"This week"===e){const t=n.split("(")[1].split(")")[0],o=n.split(" ")[0];R.renameTask(e,n,`${a} (${t})`),R.renameTask(t,o,a)}else R.renameTask(e,n,a);J.clearTasks(),J.loadTasks(e),J.closeRenameInput(this.parentNode.parentNode)}else alert("Task name can't be empty")}static openSetDateInput(t){const e=t.children[1].children[0],n=t.children[1].children[1];J.closeAllPopups(),e.classList.add("active"),n.classList.add("active")}static closeSetDateInput(t){const e=t.children[1].children[0],n=t.children[1].children[1];e.classList.remove("active"),n.classList.remove("active")}static setTaskDate(){const n=this.parentNode.parentNode,a=document.getElementById("project-name").textContent,o=n.children[0].children[1].textContent,s=function(n,a,o){const s=l(),r=o?.locale??s.locale??d,i=o?.firstWeekContainsDate??o?.locale?.options?.firstWeekContainsDate??s.firstWeekContainsDate??s.locale?.options?.firstWeekContainsDate??1,c=o?.weekStartsOn??o?.locale?.options?.weekStartsOn??s.weekStartsOn??s.locale?.options?.weekStartsOn??0,u=t(n);if(!e(u))throw new RangeError("Invalid time value");const m={firstWeekContainsDate:i,weekStartsOn:c,locale:r,_originalDate:u};return a.match(Y).map((function(t){const e=t[0];return"p"===e||"P"===e?(0,B[e])(t,r.formatLong):t})).join("").match(C).map((function(t){if("''"===t)return"'";const e=t[0];if("'"===e)return function(t){const e=t.match(O);return e?e[1].replace(q,"'"):t}(t);const s=D[e];if(s)return o?.useAdditionalWeekYearTokens||(i=t,-1===W.indexOf(i))||A(t,a,String(n)),!o?.useAdditionalDayOfYearTokens&&function(t){return-1!==N.indexOf(t)}(t)&&A(t,a,String(n)),s(u,t,r.localize,m);var i;if(e.match(H))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return t})).join("")}(new Date(this.value),"dd/MM/yyyy");if("Today"===a||"This week"===a){const t=o.split("(")[1].split(")")[0],e=o.split(" (")[0];R.setTaskDate(a,o,s),R.setTaskDate(t,e,s),"Today"===a?R.updateTodayProject():R.updateWeekProject()}else R.setTaskDate(a,o,s);J.clearTasks(),J.loadTasks(a),J.closeSetDateInput(n)}}document.addEventListener("DOMContentLoaded",J.loadHomepage)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,